// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Mux16(a = instruction, b = feedback, sel = instruction[15], out = AorC);
    Mux(a = true, b = instruction[5], sel = instruction[15], out = d1);
    Mux(a = false, b = instruction[4], sel = instruction[15], out = d2);

    //d3 control writeM true or false
    Mux(a = false, b = instruction[3], sel = instruction[15], out = writeM);        

    //d1 control outM load in ARegister or not
    ARegister(in = AorC, load = d1, out = ARegisterOut, out[0..14] = addressM);
    
    //a-bits control ALU compute D with A or M
    DRegister(in = feedback, load = d2, out = ALUIn1);

    //d2 control feedback load in DRegister or not
    Mux16(a = ARegisterOut, b = inM, sel = instruction[12], out = ALUIn2);

    ALU(x = ALUIn1, y = ALUIn2, zx = instruction[11], nx = instruction[10], zy = instruction[9], ny = instruction[8], f = instruction[7], no = instruction[6], out = outM,  out = feedback, zr = zr, ng = ng);

    //PC Control
    Not(in = zr, out = nzr);
    Not(in = ng, out = nng);
    And(a = nzr, b = nng, out = pn);

    And(a = ng, b = instruction[2], out = j1And);
    And(a = zr, b = instruction[1], out = j2And);
    And(a = pn, b = instruction[0], out = j3And);
    Or(a = j1And, b = j2And, out = or1);
    Or(a = or1, b = j3And, out = or2);
    Mux(a = false, b = or2, sel = instruction[15], out = PCLoad);

    Not(in = PCLoad, out = PCInc);

    PC(in = ARegisterOut, load = PCLoad, inc = PCInc, reset = reset, out[0..14] = pc);

}